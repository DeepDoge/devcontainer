#!/bin/bash

green='\033[1;32m'
darkRed='\033[0;31m'
comment='\033[0;33m'
red='\033[0;91m'
nc='\033[0m'

defaultProfileName="nvim"
defaultProfile='{
    "volumes": [
        "$configDir/nvim/config:$remoteUserHomeDir/.config/nvim",
        "$configDir/nvim/cache:$remoteUserHomeDir/.cache/nvim",
        "$configDir/nvim/local/state:$remoteUserHomeDir/.local/state",
        "$configDir/nvim/local/share/nvim:$remoteUserHomeDir/.local/share/nvim",
        "$configDir/nvim/local/share/nvim-linux64:$remoteUserHomeDir/.local/share/nvim-linux64",
        "$configDir/nvim/lazygit:$remoteUserHomeDir/.local/share/lazygit_x86_64"
    ],
    "env": {},
    "installCommand": [
        "if [ ! -f $remoteUserHomeDir/.local/share/nvim-linux64/bin/nvim ]; then",
        "   cd /tmp &&",
        "   curl -LO \"https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz\" &&",
        "   tar xzf nvim-linux64.tar.gz &&",
        "   mv ./nvim-linux64/* $remoteUserHomeDir/.local/share/nvim-linux64/ &&",
        "   git clone https://github.com/LazyVim/starter ~/.config/nvim &&",
        "   rm -rf ~/.config/nvim/.git",
        "fi",
        "",
        "if [ ! -f $remoteUserHomeDir/.local/share/lazygit_x86_64/lazygit ]; then",
        "   cd /tmp &&",
        "   curl -LO https://github.com/jesseduffield/lazygit/releases/download/v0.39.4/lazygit_0.39.4_Linux_x86_64.tar.gz",
        "   tar xzf lazygit_0.39.4_Linux_x86_64.tar.gz",
        "   mv lazygit $remoteUserHomeDir/.local/share/lazygit_x86_64",
        "fi",
        "",
        "chmod +x \"$remoteUserHomeDir/.local/share/nvim-linux64/bin/nvim\" &&",
        "chmod +x \"$remoteUserHomeDir/.local/share/lazygit_x86_64/lazygit\" &&",
        "",
        "cd /usr/bin/ &&",
        "sudo ln -sf $remoteUserHomeDir/.local/share/nvim-linux64/bin/nvim nvim",
        "sudo ln -sf $remoteUserHomeDir/.local/share/lazygit_x86_64/lazygit lazygit"
    ],
    "attachCommand": ["$remoteUserHomeDir/.local/share/nvim-linux64/bin/nvim"]
}';

PrintInfo() {
    local message=$1
    echo -e "[${green}INFO${nc}] $message"
}

PrintCommand() {
    local message=$1
    local indentedMessage=$(echo -e "$message" | sed 's/^/    /')
    echo -e "\n${comment}$indentedMessage${nc}\n"
}

PrintError() {
    local message=$1
    echo -e "[${red}ERROR${nc}] ${darkRed}$message${nc}"
}

Error() {
    local message=$1
    local finally=$2
    PrintError "$message" ;
    [[ -n "$finally" ]] && $finally
    exit 1
}

String() {
    local string="$1"
    # Escape backslashes and double quotes with sed
    string=$(echo "$string" | sed 's/\\/\\\\/g; s/"/\\"/g')
    echo \""$string"\"
}

ExpandVariables() {
    local value="$1"
    echo -e "$(source <(echo -e "echo -e \$\"$value\""))"
}

GetProfileValue() { 
    local key="$1"
    local value=$(echo -e "$profile" | jq -er ".${key}") && [[ "$value" == "null" ]] && value=""
    echo -e "$value"
}


ExecuteProfileCommand() {
    local key="$1"
    local profile_commands=$(GetProfileValue "$key")

    if [ -n "$profile_commands" ]; then
        local commands=$(echo -e "$profile_commands" | jq -r 'join("\n")') && [[ -z "$commands" ]] && Error "Failed to parse $key."
        local expanded_commands=$(ExpandVariables "$commands")
        PrintInfo "Executing profile command $key"
        PrintCommand "$expanded_commands"
        devcontainer exec --workspace-folder=$(String "$projectDir") bash -c "$expanded_commands" || { PrintError "Executing $key failed."; return 1; }
    fi
    return 0
}


CreateProfileVolumeArgs() {
    # --mount   Additional mount point(s). Format: type=<bind|volume>,source=<source>,target=<target>[,external=<true|false>]   
    local volumes=$(echo "$profile" | jq -r '.volumes[]' | tr '\n' ' ') && [[ -z "$volumes" ]] && Error "Failed to parse volumes."
    local volumeArgs=""
    for volume in $volumes; do
        local hostDir=$(ExpandVariables "$volume" | awk -F':' '{print $1}')
        local containerDir=$(ExpandVariables "$volume" | awk -F':' '{print $2}')
        volumeArgs="$volumeArgs --mount type=bind,source=$hostDir,target=$containerDir"
    done
    echo -e "$volumeArgs"
}

CreateProfileVolumeDirs() {
    local volumes=$(echo "$profile" | jq -r '.volumes[]' | tr '\n' ' ') && [[ -z "$volumes" ]] && Error "Failed to parse volumes."
    for volume in $volumes; do
        local volumeDir=$(ExpandVariables "$volume" | awk -F':' '{print $1}')
        if [[ ! -d "$volumeDir" ]]; then
            PrintInfo "Creating volume directory $volumeDir"
            mkdir -p "$volumeDir"
        fi
    done
}

GetConfigValue() { 
    local key="$1"
    local value=$(echo -e "$devContainerConfigs" | jq -er ".${key}") && [[ "$value" == "null" ]] && value=""
    echo -e "$value"
}

StopContainerIfItHasNoPts() {
    # if container still exists and has no pts, stop it
    local containerId=$1
    

    local containerHasNoPts=$(docker container inspect "$containerId" | jq -er '.[0].State.Pid == 0')
    if [[ "$containerHasNoPts" == "true" ]]; then
        PrintInfo "Stopping container $containerId"
        docker container stop "$containerId" >/dev/null
    fi
}



homeDirectory="$HOME"
configDir="$homeDirectory/.config/devcontainer-use"
mkdir -p "$configDir"

# Project

arg_ProjectDir=""
for ((i = 2; i <= $#; i++)); do
    arg_ProjectDir="$arg_ProjectDir ${!i}"
done
if [[ -n "$arg_ProjectDir" ]]; then
    projectDir=$(realpath "$arg_ProjectDir")
else
    projectDir=$(realpath "$(pwd)")
fi
projectName=$(basename "$projectDir")

PrintInfo "Project directory: $projectDir"

# Profile

profilesDir="$configDir/profiles"
mkdir -p "$profilesDir"
if [[ ! -f "$profilesDir/$defaultProfileName.json" ]]; then
    echo -e "$defaultProfile" >"$profilesDir/$defaultProfileName.json"
fi
arg_ProfileName=$1 && [[ -z "$arg_ProfileName" ]] && Error "No profile name specified. Available profiles: $(ls "$profilesDir" | sed 's/\.json//g' | tr '\n' ' ')"
profileName="$arg_ProfileName"
profilePath="$profilesDir/$profileName.json" && [[ ! -f "$profilePath" ]] && Error "Profile $(String "$profileName") not found."
profile=$(cat "$profilePath" | sed '/^\s*\/\/.*\|\/\*.*\*\/\s*$/d') && [[ -z "$profile" ]] && Error "Failed to read profile $(String "$profileName")."

PrintInfo "Profile: $profileName"

# Devcontainer configs

devContainerConfigs=$(devcontainer read-configuration --include-features-configuration true --include-merged-configuration true --workspace-folder=$(String "$projectDir"))
if [[ -z "$devContainerConfigs" ]]; then
    Error "Failed to read devcontainer configuration."
fi
PrintInfo "Devcontainer configs:"
echo $devContainerConfigs | jq
remoteUser=$(GetConfigValue "mergedConfiguration.remoteUser") && [[ -z "$remoteUser" ]] && remoteUser="root"
if [[ "$remoteUser" == "root" ]]; then
    remoteUserHomeDir="/root"
else
    remoteUserHomeDir="/home/$remoteUser"
fi
workDir=$(GetConfigValue "workspace.workspaceFolder") && [[ -z "$workDir" ]] && Error "Failed to parse workspaceFolder."

# All variables are ready at this point

PrintInfo "Starting devcontainer for project $(String "$projectName") with profile $(String "$profileName")"

PrintCommand "$(CreateProfileVolumeArgs)"
isRunning=true && $(devcontainer exec --workspace-folder=$(String "$projectDir") echo -e "" >/dev/null 2>&1) || isRunning=false
if [[ "$isRunning" == "false" ]]; then
    PrintInfo "Profile volumes:"
    PrintCommand $(GetProfileValue "volumes" | jq -r 'join("\n")')
fi
CreateProfileVolumeDirs
devcontainer up --workspace-folder=$(String "$projectDir") $(CreateProfileVolumeArgs) || Error "Failed to up devcontainer."
containerInfo=$(devcontainer up --workspace-folder=$(String "$projectDir") $(CreateProfileVolumeArgs)) && [[ -z "$containerInfo" ]] && Error "Failed to receive container info"
containerId=$(echo -e "$containerInfo" | jq -er '.containerId') && [[ "$containerId" == "null" ]] && Error "Failed to parse container id."
PrintInfo "Container ID: $(String "$containerId")."PrintInfo "Container workdir: $(String "$containerWorkdir")."

# When this script ends check if container has pts. If not, stop it.
trap "StopContainerIfItHasNoPts $containerId" EXIT

# Attach to the container

PrintInfo "Attaching to the container $(String "$containerId") project"

AttachingError() {
    Error "Attaching to the container failed." "AttachWithBash"
}

InstallError() {
    trap "docker rm -f $containerId" EXIT
    Error "Installing profile to the container failed.\nAttaching to the container with bash for debugging." \
        "devcontainer exec --workspace-folder=$(String "$projectDir") bash"
}

ExecuteProfileCommand "installCommand" || InstallError
ExecuteProfileCommand "attachCommand" || AttachingError
