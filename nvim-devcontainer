#!/bin/bash

PrintInfo() {
    local message=$1
    echo -e "[${green}INFO${nc}] $message"
}

PrintError() {
    local message=$1
    echo -e "[${red}ERROR${nc}] $message"
}

Panic() {
    local message=$1
    local beforeExit=$2
    PrintError "$message"
    [[ -n "$beforeExit" ]] && $beforeExit
    exit 1
}

GetProfileValue() {
    local key="$1"
    local value=$(echo "$profile" | jq -r ".${key}")
    if [[ "$value" != "null" ]]; then
        echo "$value"
        return
    fi

    echo ""
}

ExecuteProfileCommand() {
    local key="$1"
    local commands=$(jq -r ".${key} | @sh" <<< "$profile")
    
    if [[ -n "$commands" ]]; then
        PrintInfo "Executing $key..."
        docker exec -u "$config_RemoteUser" -it "$containerId" bash -c "$commands"
        if [[ $? -ne 0 ]]; then
            PrintError "Executing $key failed."
            return 1
        fi
    fi
}

ProfileVolumesAsDockerArgs() {
    local volumes=$(GetProfileValue "volumes")
    if [[ -n "$volumes" ]]; then
        local dockerArgs=""
        for volume in $(jq -r ".volumes | .[]" <<< "$profile"); do
            dockerArgs="$dockerArgs -v $volume"
        done
        echo "$dockerArgs"
    fi
}

FindProjectConfig() {
    local paths=(
        "$projectPath/devcontainer.json"
        "$projectPath/.devcontainer/devcontainer.json"
    )

    for path in "${paths[@]}"; do
        if [[ -f "$path" ]]; then
            echo "$path"
            return
        fi
    done
}

GetConfigValue() {
    local key="$1"

    local value=$(echo "$projectConfig" | jq -r ".${key}")
    if [[ "$value" != "null" ]]; then
        echo "$value"
        return
    fi

    local metadataValue=$(echo "$imageConfig" | jq -r ". | reverse | .[] | select(.${key} != null) | .${key}" | head -n 1)
    if [[ "$metadataValue" != "" && "$metadataValue" != "null" ]]; then
        echo "$metadataValue"
        return
    fi

    echo ""
}

ExecuteConfigCommand() {
    local key="$1"
    local command=$(GetConfigValue "$key")

    if [[ -n "$command" ]]; then
        PrintInfo "Executing $key..."
        docker exec -u "$config_RemoteUser" -it "$containerId" bash -c "$command"
        if [[ $? -ne 0 ]]; then
            PrintError "Executing $key failed."
            return 1
        fi
    fi

    return 0
}

green='\033[0;32m'
red='\033[0;31m'
nc='\033[0m'

nvimDownload="https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz"
lazyGitDownload="https://github.com/jesseduffield/lazygit/releases/download/v0.39.4/lazygit_0.39.4_Linux_x86_64.tar.gz"

homeDirectory="$HOME"
configDir="$homeDirectory/.config/nvim-devcontainer-dd"
profilesDir="$configDir/profiles"

arg_ProjectPath=""
for ((i = 2; i <= $#; i++)); do
    arg_ProjectPath="$arg_ProjectPath ${!i}"
done
if [[ -n "$arg_ProjectPath" ]]; then
    projectPath=$(realpath "$arg_ProjectPath")
else
    projectPath=$(realpath "$(pwd)")
fi
projectName=$(basename "$projectPath")

projectConfigPath=$(FindProjectConfig) && [[ ! -f "$projectConfigPath" ]] && Panic "No devcontainer.json found."
projectConfigDir=$(dirname "$projectConfigPath")
projectConfig=$(sed '/^\s*\/\/.*\|\/\*.*\*\/\s*$/d' "$projectConfigPath") && [[ -z "$projectConfig" ]] && Panic "Failed to read devcontainer.json."

containerId=$(docker ps -aq -f "label=nvim-devcontainer-$projectPath")
containerLabel="nvim-devcontainer-$projectPath"
config_Dockerfile=$(GetConfigValue 'build.dockerfile')

if [[ -n "$config_Dockerfile" ]]; then
    dockerfilePath="$projectConfigDir/$config_Dockerfile"
    config_Image="nvim-devcontainer--$projectName--$(sha256sum "$dockerfilePath" | awk '{print $1}')"
else
    config_Image=$(GetConfigValue 'image') && [[ -z "$config_Image" ]] && Panic "No image specified in devcontainer.json."
fi

PrintInfo "Using Docker image \"$config_Image\"..."
imageConfig=$(docker inspect --format='{{index .Config.Labels "devcontainer.metadata"}}' "$config_Image")
config_RemoteUser=$(GetConfigValue 'remoteUser')
if [[ -z "$config_RemoteUser" ]]; then
    config_RemoteUser="root"
    containerHomeDirectory="/root"
else
    containerHomeDirectory="/home/$config_RemoteUser"
fi



defaultProfileName="nvim"
defaultProfile='{
        "volumes": [
            "$configDir/nvim/config:$containerHomeDirectory/.config/nvim",
            "$configDir/nvim/cache:$containerHomeDirectory/.cache/nvim",
            "$configDir/nvim/local/state:$containerHomeDirectory/.local/state",
            "$configDir/nvim/local/share/nvim:$containerHomeDirectory/.local/share/nvim",
            "$configDir/nvim/local/share/nvim-linux64:$containerHomeDirectory/.local/share/nvim-linux64"
        ],
        "env": {},
        "installCommand": [
            "if [ ! -f \"$containerHomeDirectory/.local/share/nvim-linux64/bin/nvim\" ]; then",
            "    echo \"Downloading Neovim...\"",
            "    cd /tmp &&",
            "    curl -LO \"$nvimDownload\"",
            "    tar xzf nvim-linux64.tar.gz &&",
            "    mv ./nvim-linux64/* $containerHomeDirectory/.local/share/nvim-linux64/ &&",
            "    rm -rf /tmp/nvim-linux64.tar.gz /tmp/nvim-linux64",
            "fi",

            "chmod +x $containerHomeDirectory/.local/share/nvim-linux64/bin/nvim &&",

            "mkdir -p $containerHomeDirectory/.local/bin &&",
            "ln -sf $containerHomeDirectory/.local/share/nvim-linux64/bin/nvim $containerHomeDirectory/.local/bin/nvim &&"
        ],
        "attachCommand": ["nvim"]
    }'

mkdir -p "$profilesDir"
if [[ ! -f "$profilesDir/$defaultProfileName.json" ]]; then
    echo "$defaultProfile" >"$profilesDir/$defaultProfileName.json"
fi
arg_ProfileName=$1 && [[ -z "$arg_ProfileName" ]] && Panic "No profile name specified."
profilePath="$profilesDir/$arg_ProfileName.json" && [[ ! -f "$profilePath" ]] && Panic "Profile \"$arg_ProfileName\" not found."
profile=$(cat "$profilePath") && [[ -z "$profile" ]] && Panic "Failed to read profile \"$arg_ProfileName\"."




if [ -z "$containerId" ]; then
    if [[ -n "$config_Dockerfile" ]]; then
        PrintInfo "Building Docker image using $dockerfilePath..."
        docker build -t "$config_Image" -f "$dockerfilePath" "$projectConfigDir" || Panic "Building Docker image failed."
    else
        PrintInfo "Pulling Docker image \"$config_Image\"..."
        docker pull "$config_Image" || Panic "Pulling Docker image failed."
    fi

    PrintInfo "Creating container for \"$projectPath\" project..."

    docker run --net=host -w "/workspaces/$projectName" \
        -v "$projectPath:/workspaces/$projectName" \
        $(ProfileVolumesAsDockerRunArguments) \
        -v "$homeDirectory/.gitconfig:/etc/gitconfig" \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -u root \
        -e DISPLAY=$DISPLAY \
        -e SHELL=/bin/bash \
        -d --label "$containerLabel" "$config_Image" bash -c "
            sleep 5
            while [ \$(ls /dev/pts | wc -l) -gt 1 ]; do
                sleep 5
            done
        " || Panic "Creating container failed."

    containerId=$(docker ps -aq -f "label=$containerLabel")
    PrintInfo "Container created with ID \"$containerId\"."

    PrintInfo "Initializing container..."

    InitializationPanic() {
        Panic "Initialization failed." "docker rm -f \"$containerId\""
    }

    docker exec -u root "$containerId" bash -c "
            chown -R $config_RemoteUser /workspaces &&
            chown -R $config_RemoteUser $containerHomeDirectory
        " || InitializationPanic

    ExecuteProfileCommand "installCommand" || InitializationPanic
    ExecuteConfigCommand "postCreateCommand" || InitializationPanic
fi

# Attach to the container

PrintInfo "Attaching to the container \"$containerId\" project..."

AttachWithBash() {
    PrintInfo "Attaching the container with bash..."
    docker exec -u "$config_RemoteUser" -it "$containerId" bash
}

AttachingFailed() {
    Panic "Attaching to the container failed." "AttachWithBash"
}

if [ "$(docker inspect -f '{{.State.Running}}' "$containerId")" == "false" ]; then
    PrintInfo "Container is not running. Starting it..."
    docker start "$containerId" || AttachingFailed
    ExecuteConfigCommand "postStartCommand" || AttachingFailed
fi

ExecuteConfigCommand "postAttachCommand" || AttachingFailed
ExecuteProfileCommand "attachCommand" || AttachingFailed
