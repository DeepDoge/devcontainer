#!/bin/bash

GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

projectPath=$(realpath "$(pwd)")
projectName=$(basename "${projectPath}")

homeDirectory="${HOME}"
configPath="${homeDirectory}/.config/@deepdoge/nvim-devcontainer"

nvimTarGzLink="https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz"

devContainerJsonPaths=(
    "$(pwd)/devcontainer.json"
    "$(pwd)/.devcontainer/devcontainer.json"
)

if [[ ! -f "${devContainerJsonPaths[0]}" && ! -f "${devContainerJsonPaths[1]}" ]]; then
    echo -e "[${RED}ERROR${NC}] No devcontainer.json found."
    exit 1
fi

devContainerJson=""
for path in "${devContainerJsonPaths[@]}"; do
    if [[ -f "${path}" ]]; then
        echo -e "[${GREEN}INFO${NC}] Found devcontainer.json at \"${path}\"."
        devContainerJson=$(sed '/^\s*\/\/.*\|\/\*.*\*\/\s*$/d' "${path}")
        break
    fi
done

if [[ -z "${devContainerJson}" ]]; then
    echo -e "[${RED}ERROR${NC}] No valid devcontainer.json found."
    exit 1
fi

devContainerJsonDir=$(dirname "${path}")

buildDockerfile=$(echo "${devContainerJson}" | jq -r '.build.dockerfile')
postCreateCommand=$(echo "${devContainerJson}" | jq -r '.postCreateCommand')
if [[ "${postCreateCommand}" == "null" ]]; then
    postCreateCommand=""
fi
postStartCommand=$(echo "${devContainerJson}" | jq -r '.postStartCommand')
if [[ "${postStartCommand}" == "null" ]]; then
    postStartCommand=""
fi

if [[ -n "${buildDockerfile}" && "${buildDockerfile}" != "null" ]]; then
    echo -e "[${GREEN}INFO${NC}] Building Docker image using ${buildDockerfile}..."
    dockerFilePath="${devContainerJsonDir}/${buildDockerfile}"
    dockerFileHash=$(sha256sum "${dockerFilePath}" | awk '{print $1}')
    image="nvim-devcontainer--${projectName}--${dockerFileHash}"
    docker build -t "${image}" -f "${dockerFilePath}" "${devContainerJsonDir}"

    if [[ $? -ne 0 ]]; then
        echo -e "[${RED}ERROR${NC}] Docker build failed."
        exit 1
    fi

else
    image=$(echo "${devContainerJson}" | jq -r '.image')
    if [[ -z "${image}" || "${image}" == "null" ]]; then
        echo -e "[${RED}ERROR${NC}] No image specified in devcontainer.json."
        exit 1
    fi

    echo -e "[${GREEN}INFO${NC}] Pulling Docker image \"${image}\"..."
    docker pull "${image}"

    if [[ $? -ne 0 ]]; then
        echo -e "[${RED}ERROR${NC}] Docker pull failed."
        exit 1
    fi
fi

startCommand="
    cd \"/workspaces/${projectName}\" &&

    if [[ -n \"${postStartCommand}\" && \"${postStartCommand}\" != \"null\" ]]; then
        echo \"[INFO] Executing postStartCommand...\"
        ${postStartCommand}
    fi

    ~/.local/bin/nvim
"

container_id=$(docker ps -aq -f "label=nvim-devcontainer-${projectPath}")

if [ -z "$container_id" ]; then
    echo -e "[${GREEN}INFO${NC}] Creating container for \"${projectPath}\" project..."

    docker run --net=host -w "/workspaces/${projectName}" \
        -v "${projectPath}:/workspaces/${projectName}" \
        -v "${configPath}/nvim/config:/root/.config/nvim" \
        -v "${configPath}/nvim/cache:/root/.cache/nvim" \
        -v "${configPath}/nvim/local/state:/root/.local/state/nvim" \
        -v "${configPath}/nvim/local/share/nvim:/root/.local/share/nvim" \
        -v "${configPath}/nvim/local/share/nvim-linux64:/root/.local/share/nvim-linux64" \
        -v ~/.gitconfig:/etc/gitconfig \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=$DISPLAY \
        -it --label "nvim-devcontainer-${projectPath}" "${image}" bash -c "
            if [ ! -f ~/.local/share/nvim-linux64/bin/nvim ]; then
                cd /tmp &&
                curl -LO ${nvimTarGzLink} &&
                tar xzf nvim-linux64.tar.gz &&
                mkdir -p ~/.local/share &&
                mv ./nvim-linux64/* ~/.local/share/nvim-linux64/
            fi

            chmod +x ~/.local/share/nvim-linux64/bin/nvim

            mkdir -p ~/.local/bin
            cd ~/.local/bin/ &&
            ln -sf ~/.local/share/nvim-linux64/bin/nvim nvim

            cd \"/workspaces/${projectName}\" &&

            if [[ -n \"${postCreateCommand}\" && \"${postCreateCommand}\" != \"null\" ]]; then
                echo \"[INFO] Executing postCreateCommand...\" ;
                ${postCreateCommand}
            fi

            ${startCommand}
        "

    container_id=$(docker ps -aq -f "label=projectPath=${projectPath}")
else
    if [ "$(docker inspect -f '{{.State.Running}}' "${container_id}")" == "false" ]; then
        echo -e "[${GREEN}INFO${NC}] Starting container \"${container_id}\"..."
        docker start "${container_id}"
    fi
    echo -e "[${GREEN}INFO${NC}] Attaching to the container \"${container_id}\" project..."
    docker exec -it "${container_id}" bash -c "
        ${startCommand}    
    "
fi
