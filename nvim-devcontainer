#!/bin/bash

GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

HOME_DIRECTORY="${HOME}"
CONFIG_PATH="${HOME_DIRECTORY}/.config/nvim-devcontainer-dd"
NVIM_DOWNLOAD="https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz"
LAZY_GIT_DOWNLOAD="https://github.com/jesseduffield/lazygit/releases/download/v0.39.4/lazygit_0.39.4_Linux_x86_64.tar.gz"

# If arguments is given, use them as project path, otherwise use current directory.
if [[ -n "$@" ]]; then
    PROJECT_PATH=$(realpath "$@")
else
    PROJECT_PATH=$(realpath "$(pwd)")
fi
PROJECT_NAME=$(basename "$PROJECT_PATH")

# Function to print colored messages
print_info() {
    local message=$1
    echo -e "[${GREEN}INFO${NC}] $message"
}


print_error() {
    local message=$1
    echo -e "[${RED}ERROR${NC}] $message"
}

# Function to find the devcontainer.json file
find_devcontainer_json() {
    local paths=(
        "$PROJECT_PATH/devcontainer.json"
        "$PROJECT_PATH/.devcontainer/devcontainer.json"
    )

    for path in "${paths[@]}"; do
        if [[ -f "$path" ]]; then
            echo "$path"
            return
        fi
    done
}

# Function to read the content of devcontainer.json
read_devcontainer_json() {
    local devcontainer_json_path="$1"
    sed '/^\s*\/\/.*\|\/\*.*\*\/\s*$/d' "$devcontainer_json_path"
}

# Function to get a value from devcontainer.json or devcontainer.metadata
get_config_value() {
    local key="$1"

    local value=$(echo "$DEVCONTAINER_JSON" | jq -r ".${key}")
    if [[ "$value" != "null" ]]; then
        echo "$value"
        return
    fi

    local metadata_value=$(echo "$IMAGE_DEVCONTAINER_METADATA" | jq -r ". | reverse | .[] | select(.${key} != null) | .${key}" | head -n 1)
    if [[ "$metadata_value" != "" && "$metadata_value" != "null" ]]; then
        echo "$metadata_value"
        return
    fi

    echo ""
}

# Main script
DEVCONTAINER_JSON_PATH=$(find_devcontainer_json)

if [[ ! -f "$DEVCONTAINER_JSON_PATH" ]]; then
    print_error "No devcontainer.json found."
    exit 1
fi

DEVCONTAINER_JSON=$(read_devcontainer_json "$DEVCONTAINER_JSON_PATH")
if [[ -z "$DEVCONTAINER_JSON" ]]; then
    print_error "No valid devcontainer.json found."
    exit 1
fi

CONTAINER_ID=$(docker ps -aq -f "label=nvim-devcontainer-$PROJECT_PATH")
CONTAINER_LABEL="nvim-devcontainer-$PROJECT_PATH"
CONFIG_DOCKERFILE=$(get_config_value 'build.dockerfile')

if [[ -n "$CONFIG_DOCKERFILE" ]]; then
    DEVCONTAINER_JSON_DIR=$(dirname "$DEVCONTAINER_JSON_PATH")
    DOCKERFILE_PATH="$DEVCONTAINER_JSON_DIR/$CONFIG_DOCKERFILE"
    CONFIG_IMAGE="nvim-devcontainer--$PROJECT_NAME--$(sha256sum "$DOCKERFILE_PATH" | awk '{print $1}')"
else
    CONFIG_IMAGE=$(get_config_value 'image')
    if [[ -z "$CONFIG_IMAGE" ]]; then
        print_error "No image specified in devcontainer.json."
        exit 1
    fi
fi

print_info "Using Docker image \"$CONFIG_IMAGE\"..."
IMAGE_DEVCONTAINER_METADATA=$(docker inspect --format='{{index .Config.Labels "devcontainer.metadata"}}' "$CONFIG_IMAGE")

CONFIG_POST_CREATE_COMMAND=$(get_config_value 'postCreateCommand')
CONFIG_POST_START_COMMAND=$(get_config_value 'postStartCommand')
CONFIG_REMOTE_USER=$(get_config_value 'remoteUser')
if [[ -z "$CONFIG_REMOTE_USER" ]]; then
    CONFIG_REMOTE_USER="root"
    CONTAINER_HOME_DIRECTORY="/root"
else
    CONTAINER_HOME_DIRECTORY="/home/$CONFIG_REMOTE_USER"
fi

if [ -z "$CONTAINER_ID" ]; then
    if [[ -n "$CONFIG_DOCKERFILE" ]]; then
        print_info "Building Docker image using $DOCKERFILE_PATH..."
        docker build -t "$CONFIG_IMAGE" -f "$DOCKERFILE_PATH" "$DEVCONTAINER_JSON_DIR"

        if [[ $? -ne 0 ]]; then
            print_error "Building Docker image failed."
            exit 1
        fi
    else
        print_info "Pulling Docker image \"$CONFIG_IMAGE\"..."
        docker pull "$CONFIG_IMAGE"

        if [[ $? -ne 0 ]]; then
            print_error "Pulling Docker image failed."
            exit 1
        fi
    fi

    print_info "Creating container for \"$PROJECT_PATH\" project..."

    mkdir -p "$CONFIG_PATH/nvim/config"
    mkdir -p "$CONFIG_PATH/nvim/cache"
    mkdir -p "$CONFIG_PATH/nvim/local/state"
    mkdir -p "$CONFIG_PATH/nvim/local/share/nvim"
    mkdir -p "$CONFIG_PATH/nvim/local/share/nvim-linux64"

    docker run --net=host -w "/workspaces/$PROJECT_NAME" \
        -v "$PROJECT_PATH:/workspaces/$PROJECT_NAME" \
        -v "$CONFIG_PATH/nvim/config:$CONTAINER_HOME_DIRECTORY/.config/nvim" \
        -v "$CONFIG_PATH/nvim/cache:$CONTAINER_HOME_DIRECTORY/.cache/nvim" \
        -v "$CONFIG_PATH/nvim/local/state:$CONTAINER_HOME_DIRECTORY/.local/state/nvim" \
        -v "$CONFIG_PATH/nvim/local/share/nvim:$CONTAINER_HOME_DIRECTORY/.local/share/nvim" \
        -v "$CONFIG_PATH/nvim/local/share/nvim-linux64:$CONTAINER_HOME_DIRECTORY/.local/share/nvim-linux64" \
        -v "$HOME_DIRECTORY/.gitconfig:/etc/gitconfig" \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -u root \
        -e DISPLAY=$DISPLAY \
        -e SHELL=/bin/bash \
        -d --label "$CONTAINER_LABEL" "$CONFIG_IMAGE" bash -c "
            while true; do
                sleep 5
                if [ "$(ls /dev/pts | wc -l)" -le 1 ]; then
                    break
                fi
            done
        "
    if [[ $? -ne 0 ]]; then
        print_error "Creating the container failed."
        exit 1
    fi

    CONTAINER_ID=$(docker ps -aq -f "label=$CONTAINER_LABEL")

    print_info "Initializing container..."

    docker exec -u "$CONFIG_REMOTE_USER" \
        -it "$CONTAINER_ID" \
        bash -c "
            echo '[INFO] whoami: ' &&
            whoami &&
            echo '[INFO] id: ' &&
            id &&
            echo '[INFO] ls -la: ' &&
            ls -la
            
            sudo chown -R $CONFIG_REMOTE_USER:$CONFIG_REMOTE_USER /workspaces
            sudo chown 755 /workspaces
            sudo chown -R $CONFIG_REMOTE_USER:$CONFIG_REMOTE_USER $CONTAINER_HOME_DIRECTORY
            sudo chown 755 $CONTAINER_HOME_DIRECTORY

            if [ ! -f $CONTAINER_HOME_DIRECTORY/.local/share/nvim-linux64/bin/nvim ]; then
                cd /tmp &&
                curl -LO \"$NVIM_DOWNLOAD\" &&
                tar xzf nvim-linux64.tar.gz &&
                mkdir -p $CONTAINER_HOME_DIRECTORY/.local/share &&
                mv ./nvim-linux64/* $CONTAINER_HOME_DIRECTORY/.local/share/nvim-linux64/
            fi

            chmod +x \"$CONTAINER_HOME_DIRECTORY/.local/share/nvim-linux64/bin/nvim\"
            
            mkdir -p $CONTAINER_HOME_DIRECTORY/.local/bin
            cd $CONTAINER_HOME_DIRECTORY/.local/bin/ &&
            ln -sf $CONTAINER_HOME_DIRECTORY/.local/share/nvim-linux64/bin/nvim nvim

            cd \"/workspaces/$PROJECT_NAME\" &&

            if [[ -n \"$CONFIG_POST_CREATE_COMMAND\" && \"$CONFIG_POST_CREATE_COMMAND\" != \"null\" ]]; then
                echo \"[INFO] Executing postCreateCommand...\" ;
                $CONFIG_POST_CREATE_COMMAND
            fi
        "
    if [[ $? -ne 0 ]]; then
        print_error "Initializing the container failed."
        docker rm -f "$CONTAINER_ID"
        exit 1
    fi
fi

if [ "$(docker inspect -f '{{.State.Running}}' "$CONTAINER_ID")" == "false" ]; then
    print_info "Starting container \"$CONTAINER_ID\"..."
    docker start "$CONTAINER_ID"
    if [[ $? -ne 0 ]]; then
        print_error "Starting the container failed."
        exit 1
    fi
fi
print_info "Attaching to the container \"$CONTAINER_ID\" project..."
docker exec -u "$CONFIG_REMOTE_USER" \
    -it "$CONTAINER_ID" \
    bash -c "
        if [[ -n \"$CONFIG_POST_START_COMMAND\" && \"$CONFIG_POST_START_COMMAND\" != \"null\" ]]; then
            echo \"[INFO] Executing postStartCommand...\"
            $CONFIG_POST_START_COMMAND
        fi

        $CONTAINER_HOME_DIRECTORY/.local/bin/nvim
    "
if [[ $? -ne 0 ]]; then
    print_error "Attaching to the container with nvim failed."
    print_info "Attaching the container with bash for debugging..."
    docker exec -u "$CONFIG_REMOTE_USER" \
        -it "$CONTAINER_ID" \
        bash
    exit 1
fi