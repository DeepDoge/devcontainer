#!/bin/bash

GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

HOME_DIRECTORY="${HOME}"
CONFIG_PATH="${HOME_DIRECTORY}/.config/@deepdoge/nvim-devcontainer"
NVIM_TAR_GZ_LINK="https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz"

PROJECT_PATH=$(realpath "$(pwd)")
PROJECT_NAME=$(basename "$PROJECT_PATH")

# Function to print colored messages
# Function to print colored messages
print_info() {
    local message=$1
    echo -e "[${GREEN}INFO${NC}] $message"
}


print_error() {
    local message=$1
    echo -e "[${RED}ERROR${NC}] $message"
}

# Function to find the devcontainer.json file
find_devcontainer_json() {
    local paths=(
        "$PROJECT_PATH/devcontainer.json"
        "$PROJECT_PATH/.devcontainer/devcontainer.json"
    )

    for path in "${paths[@]}"; do
        if [[ -f "$path" ]]; then
            return "$path"
        fi
    done
}

# Function to read the content of devcontainer.json
read_devcontainer_json() {
    local devcontainer_json_path="$1"
    sed '/^\s*\/\/.*\|\/\*.*\*\/\s*$/d' "$devcontainer_json_path"
}

# Function to get a value from devcontainer.json or devcontainer.metadata
get_config_value() {
    local devcontainer_json="$1"
    local image_devcontainer_metadata="$2"
    local key="$3"

    local value=$(echo "$devcontainer_json" | jq -r ".${key}")
    if [[ "$value" != "null" ]]; then
        return "$value"
    fi

    local metadata_value=$(echo "$image_devcontainer_metadata" | jq -r ".[] | select(.${key} != null) | .${key}")
    if [[ "$metadata_value" != "" && "$metadata_value" != "null" ]]; then
        return "$metadata_value"
    fi

    return ""
}

# Function to build the Docker image
build_docker_image() {
    local devcontainer_json_dir="$1"
    local dockerfile="$2"
    local image_name="$3"
    
    local dockerfile_path="$devcontainer_json_dir/$dockerfile"
    local dockerfile_hash=$(sha256sum "$dockerfile_path" | awk '{print $1}')
    local image="nvim-devcontainer--$image_name--$dockerfile_hash"
    
    print_info "Building Docker image using $dockerfile..."
    docker build -t "$image" -f "$dockerfile_path" "$devcontainer_json_dir"

    if [[ $? -ne 0 ]]; then
        print_error "Docker build failed."
        exit 1
    fi

    return "$image"
}

# Function to pull the Docker image
pull_docker_image() {
    local image="$1"

    print_info "Pulling Docker image \"$image\"..."
    docker pull "$image"

    if [[ $? -ne 0 ]]; then
        print_error "Docker pull failed."
        exit 1
    fi
}

# Main script
find_devcontainer_json
DEVCONTAINER_JSON_PATH=$?

if [[ ! -f "$DEVCONTAINER_JSON_PATH" ]]; then
    print_error "No devcontainer.json found."
    exit 1
fi

DEVCONTAINER_JSON=$(read_devcontainer_json "$DEVCONTAINER_JSON_PATH")
if [[ -z "$DEVCONTAINER_JSON" ]]; then
    print_error "No valid devcontainer.json found."
    exit 1
fi

IMAGE_DEVCONTAINER_METADATA=$(docker inspect --format='{{index .Config.Labels "devcontainer.metadata"}}' "$image")

get_config_value "$DEVCONTAINER_JSON" "$IMAGE_DEVCONTAINER_METADATA" 'build.dockerfile'
BUILD_DOCKERFILE=$?
get_config_value "$DEVCONTAINER_JSON" "$IMAGE_DEVCONTAINER_METADATA" 'postStartCommand'
POST_START_COMMAND=$?
get_config_value "$DEVCONTAINER_JSON" "$IMAGE_DEVCONTAINER_METADATA" 'postCreateCommand'
POST_CREATE_COMMAND=$?

if [[ -n "$BUILD_DOCKERFILE" && "$BUILD_DOCKERFILE" != "null" ]]; then
    DEVCONTAINER_JSON_DIR=$(dirname "$DEVCONTAINER_JSON_PATH")

    build_docker_image "$DEVCONTAINER_JSON_DIR" "$BUILD_DOCKERFILE" "$PROJECT_NAME"
    IMAGE=$?
else
    get_config_value "$DEVCONTAINER_JSON" "$IMAGE_DEVCONTAINER_METADATA" 'image'
    IMAGE=$?
    if [[ -z "$IMAGE" || "$IMAGE" == "null" ]]; then
        print_error "No image specified in devcontainer.json."
        exit 1
    fi

    pull_docker_image "$IMAGE"
fi

# Start the container
START_COMMAND="
    cd \"/workspaces/${PROJECT_NAME}\" &&

    if [[ -n \"$POST_START_COMMAND\" && \"$POST_START_COMMAND\" != \"null\" ]]; then
        echo \"[INFO] Executing postStartCommand...\"
        $POST_START_COMMAND
    fi

    ~/.local/bin/nvim
"

CONTAINER_ID=$(docker ps -aq -f "label=nvim-devcontainer-$PROJECT_PATH")

if [ -z "$CONTAINER_ID" ]; then
    print_info "Creating container with image \"$IMAGE\" for \"$PROJECT_PATH\" project..."

    docker run --net=host -w "/workspaces/$PROJECT_NAME" \
        -v "$PROJECT_PATH:/workspaces/$PROJECT_NAME" \
        -v "$CONFIG_PATH/nvim/config:/root/.config/nvim" \
        -v "$CONFIG_PATH/nvim/cache:/root/.cache/nvim" \
        -v "$CONFIG_PATH/nvim/local/state:/root/.local/state/nvim" \
        -v "$CONFIG_PATH/nvim/local/share/nvim:/root/.local/share/nvim" \
        -v "$CONFIG_PATH/nvim/local/share/nvim-linux64:/root/.local/share/nvim-linux64" \
        -v "${HOME_DIRECTORY}/.gitconfig:/etc/gitconfig" \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=$DISPLAY \
        -it --label "nvim-devcontainer-$PROJECT_PATH" "$IMAGE" bash -c "
            if [ ! -f ~/.local/share/nvim-linux64/bin/nvim ]; then
                cd /tmp &&
                curl -LO ${NVIM_TAR_GZ_LINK} &&
                tar xzf nvim-linux64.tar.gz &&
                mkdir -p ~/.local/share &&
                mv ./nvim-linux64/* ~/.local/share/nvim-linux64/
            fi

            chmod +x ~/.local/share/nvim-linux64/bin/nvim

            mkdir -p ~/.local/bin
            cd ~/.local/bin/ &&
            ln -sf ~/.local/share/nvim-linux64/bin/nvim nvim

            cd \"/workspaces/${PROJECT_NAME}\" &&

            if [[ -n \"$POST_CREATE_COMMAND\" && \"$POST_CREATE_COMMAND\" != \"null\" ]]; then
                echo \"[INFO] Executing postCreateCommand...\" ;
                $POST_CREATE_COMMAND
            fi

            $START_COMMAND
        "

    CONTAINER_ID=$(docker ps -aq -f "label=projectPath=$PROJECT_PATH")
else
    if [ "$(docker inspect -f '{{.State.Running}}' "$CONTAINER_ID")" == "false" ]; then
        print_info "Starting container \"$CONTAINER_ID\"..."
        docker start "$CONTAINER_ID"
    fi
    print_info "Attaching to the container \"$CONTAINER_ID\" project..."
    docker exec -it "$CONTAINER_ID" bash -c "
        $START_COMMAND
    "
fi
