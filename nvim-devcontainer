#!/bin/bash

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Get the absolute path of the current directory (project path)
projectPath=$(realpath "$(pwd)")

# Define paths for the NeoVim configuration in the host machine
homeDirectory="${HOME}"
configPath="${homeDirectory}/.config/@deepdoge/nvim-devcontainer"

# Define the link to download the NeoVim binary
nvimTarGzLink="https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz"

# Check if devcontainer.json exists in any of the defined paths
devContainerJsonPaths=(
    "$(pwd)/devcontainer.json"
    "$(pwd)/.devcontainer/devcontainer.json"
)

if [[ ! -f "${devContainerJsonPaths[0]}" && ! -f "${devContainerJsonPaths[1]}" ]]; then
    echo -e "[${RED}ERROR${NC}] No devcontainer.json found."
    exit 1
fi

# Read the content of devcontainer.json
devContainerJson=""
for path in "${devContainerJsonPaths[@]}"; do
    if [[ -f "${path}" ]]; then
        echo -e "[${GREEN}INFO${NC}] Found devcontainer.json at \"${path}\"."
        devContainerJson=$(sed '/^\s*\/\/.*\|\/\*.*\*\/\s*$/d' "${path}")
        break
    fi
done

# Check if a valid devcontainer.json is found
if [[ -z "${devContainerJson}" ]]; then
    echo -e "[${RED}ERROR${NC}] No valid devcontainer.json found."
    exit 1
fi

# Get the directory where devcontainer.json is located
devContainerJsonDir=$(dirname "${path}")

# Extract build properties from the JSON using jq
buildDockerfile=$(echo "${devContainerJson}" | jq -r '.build.dockerfile')

# Build or pull the Docker image based on buildDockerfile presence
if [[ -n "${buildDockerfile}" && "${buildDockerfile}" != "null" ]]; then
    echo -e "[${GREEN}INFO${NC}] Building Docker image using ${buildDockerfile}..."
    dockerFilePath="${devContainerJsonDir}/${buildDockerfile}"
    dockerFileHash=$(sha256sum "${dockerFilePath}" | awk '{print $1}')
    image="nvim-devcontainer--${projectPath}--${dockerFileHash}"
    docker build -t "${image}" -f "${dockerFilePath}" "${devContainerJsonDir}"

    if [[ $? -ne 0 ]]; then
        echo -e "[${RED}ERROR${NC}] Docker build failed."
        exit 1
    fi

else
    image=$(echo "${devContainerJson}" | jq -r '.image')
    if [[ -z "${image}" || "${image}" == "null" ]]; then
        echo -e "[${RED}ERROR${NC}] No image specified in devcontainer.json."
        exit 1
    fi

    echo -e "[${GREEN}INFO${NC}] Pulling Docker image \"${image}\"..."
    docker pull "${image}"

    if [[ $? -ne 0 ]]; then
        echo -e "[${RED}ERROR${NC}] Docker pull failed."
        exit 1
    fi
fi

# Check if the container exists for the project
container_id=$(docker ps -aq -f "ancestor=${image}" -f "label=projectPath=${projectPath}")

if [ -z "$container_id" ]; then
    # The container doesn't exist, so we need to create and run it
    echo -e "[${GREEN}INFO${NC}] Creating container for \"${projectPath}\" project..."

    # Install NeoVim and create the container
    docker run -w "/workspaces/${projectPath}" \
        -v "${projectPath}:/workspaces/${projectPath}" \
        -v "${configPath}/nvim/config:/root/.config/nvim" \
        -v "${configPath}/nvim/cache:/root/.cache/nvim" \
        -v "${configPath}/nvim/local/state:/root/.local/state/nvim" \
        -v "${configPath}/nvim/local/share/nvim:/root/.local/share/nvim" \
        -v "${configPath}/nvim/local/share/nvim-linux64:/root/.local/share/nvim-linux64" \
        -it --rm --label "projectPath=${projectPath}" "${image}" bash -c "
            # Check if NeoVim is already installed in the container
            if [ ! -f ~/.local/share/nvim-linux64/bin/nvim ]; then
                # If not installed, download and extract NeoVim binary
                cd /tmp &&
                curl -LO ${nvimTarGzLink} &&
                tar xzf nvim-linux64.tar.gz &&
                mkdir -p ~/.local/share &&
                mv ./nvim-linux64/* ~/.local/share/nvim-linux64/
            fi

            # Ensure NeoVim binary is executable
            chmod +x ~/.local/share/nvim-linux64/bin/nvim

            # Create a symbolic link for NeoVim binary in ~/.local/bin
            mkdir -p ~/.local/bin
            cd ~/.local/bin/ &&
            ln -sf ~/.local/share/nvim-linux64/bin/nvim nvim

            # Change directory to the workspace
            cd \"/workspaces/${projectName}\" &&

            # Execute postCreateCommand after container is created
            if [[ -n \"${postCreateCommand}\" && \"${postCreateCommand}\" != \"null\" ]]; then
                ${postCreateCommand} ;
            fi
        "
else
    # The container exists, so we'll attach to it
    echo -e "[${GREEN}INFO${NC}] Attaching to the container for \"${projectPath}\" project..."
fi

# Attach to the container and run NeoVim and bash
docker exec -it "$container_id" bash -c "
    # Execute postStartCommand after container is started
    if [[ -n \"${postStartCommand}\" && \"${postStartCommand}\" != \"null\" ]]; then
        ${postStartCommand} ;
    fi

    # Start NeoVim and enter the container's bash shell
    ~/.local/bin/nvim ; bash
"