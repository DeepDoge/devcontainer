#!/bin/bash

green='\033[0;32m'
red='\033[0;31m'
nc='\033[0m'

homeDirectory="${HOME}"
configPath="${homeDirectory}/.config/nvim-devcontainer-dd"
nvimDownload="https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz"
lazyGitDownload="https://github.com/jesseduffield/lazygit/releases/download/v0.39.4/lazygit_0.39.4_Linux_x86_64.tar.gz"

# If arguments are given, use them as the project path; otherwise, use the current directory.
if [[ -n "$@" ]]; then
    projectPath=$(realpath "$@")
else
    projectPath=$(realpath "$(pwd)")
fi
projectName=$(basename "$projectPath")

# Function to print colored messages
PrintInfo() {
    local message=$1
    echo -e "[${green}INFO${nc}] $message"
}

PrintError() {
    local message=$1
    echo -e "[${red}ERROR${nc}] $message"
}

# Function to find the devcontainer.json file
FindDevcontainerJson() {
    local paths=(
        "$projectPath/devcontainer.json"
        "$projectPath/.devcontainer/devcontainer.json"
    )

    for path in "${paths[@]}"; do
        if [[ -f "$path" ]]; then
            echo "$path"
            return
        fi
    done
}

# Function to read the content of devcontainer.json
ReadDevcontainerJson() {
    local devcontainerJsonPath="$1"
    sed '/^\s*\/\/.*\|\/\*.*\*\/\s*$/d' "$devcontainerJsonPath"
}

# Function to get a value from devcontainer.json or devcontainer.metadata
GetConfigValue() {
    local key="$1"

    local value=$(echo "$devcontainerJson" | jq -r ".${key}")
    if [[ "$value" != "null" ]]; then
        echo "$value"
        return
    fi

    local metadataValue=$(echo "$imageDevcontainerMetadata" | jq -r ". | reverse | .[] | select(.${key} != null) | .${key}" | head -n 1)
    if [[ "$metadataValue" != "" && "$metadataValue" != "null" ]]; then
        echo "$metadataValue"
        return
    fi

    echo ""
}

# Main script
devcontainerJsonPath=$(FindDevcontainerJson)
devcontainerJsonDir=$(dirname "$devcontainerJsonPath")

if [[ ! -f "$devcontainerJsonPath" ]]; then
    PrintError "No devcontainer.json found."
    exit 1
fi

devcontainerJson=$(ReadDevcontainerJson "$devcontainerJsonPath")
if [[ -z "$devcontainerJson" ]]; then
    PrintError "No valid devcontainer.json found."
    exit 1
fi

containerId=$(docker ps -aq -f "label=nvim-devcontainer-$projectPath")
containerLabel="nvim-devcontainer-$projectPath"
config_Dockerfile=$(GetConfigValue 'build.dockerfile')

if [[ -n "$config_Dockerfile" ]]; then
    dockerfilePath="$devcontainerJsonDir/$config_Dockerfile"
    config_Image="nvim-devcontainer--$projectName--$(sha256sum "$dockerfilePath" | awk '{print $1}')"
else
    config_Image=$(GetConfigValue 'image')
    if [[ -z "$config_Image" ]]; then
        PrintError "No image specified in devcontainer.json."
        exit 1
    fi
fi

PrintInfo "Using Docker image \"$config_Image\"..."
imageDevcontainerMetadata=$(docker inspect --format='{{index .Config.Labels "devcontainer.metadata"}}' "$config_Image")

config_PostCreateCommand=$(GetConfigValue 'postCreateCommand')
config_PostStartCommand=$(GetConfigValue 'postStartCommand')
config_RemoteUser=$(GetConfigValue 'remoteUser')
if [[ -z "$config_RemoteUser" ]]; then
    config_RemoteUser="root"
    containerHomeDirectory="/root"
else
    containerHomeDirectory="/home/$config_RemoteUser"
fi

if [ -z "$containerId" ]; then
    if [[ -n "$config_Dockerfile" ]]; then
        PrintInfo "Building Docker image using $dockerfilePath..."
        docker build -t "$config_Image" -f "$dockerfilePath" "$devcontainerJsonDir"

        if [[ $? -ne 0 ]]; then
            PrintError "Building Docker image failed."
            exit 1
        fi
    else
        PrintInfo "Pulling Docker image \"$config_Image\"..."
        docker pull "$config_Image"

        if [[ $? -ne 0 ]]; then
            PrintError "Pulling Docker image failed."
            exit 1
        fi
    fi

    PrintInfo "Creating container for \"$projectPath\" project..."

    mkdir -p "$configPath/nvim/config"
    mkdir -p "$configPath/nvim/cache"
    mkdir -p "$configPath/nvim/local/state"
    mkdir -p "$configPath/nvim/local/share/nvim"
    mkdir -p "$configPath/nvim/local/share/nvim-linux64"

    docker run --net=host -w "/workspaces/$projectName" \
        -v "$projectPath:/workspaces/$projectName" \
        -v "$configPath/nvim/config:$containerHomeDirectory/.config/nvim" \
        -v "$configPath/nvim/cache:$containerHomeDirectory/.cache/nvim" \
        -v "$configPath/nvim/local/state:$containerHomeDirectory/.local/state/nvim" \
        -v "$configPath/nvim/local/share/nvim:$containerHomeDirectory/.local/share/nvim" \
        -v "$configPath/nvim/local/share/nvim-linux64:$containerHomeDirectory/.local/share/nvim-linux64" \
        -v "$homeDirectory/.gitconfig:/etc/gitconfig" \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -u root \
        -e DISPLAY=$DISPLAY \
        -e SHELL=/bin/bash \
        -d --label "$containerLabel" "$config_Image" sh -c "
            sleep 5
            while [ \$(ls /dev/pts | wc -l) -gt 1 ]; do
                sleep 5
            done
        "
    if [[ $? -ne 0 ]]; then
        PrintError "Creating the container failed."
        exit 1
    fi

    containerId=$(docker ps -aq -f "label=$containerLabel")
    PrintInfo "Container created with ID \"$containerId\"."

    PrintInfo "Initializing container..."

    docker exec -u "$config_RemoteUser" \
        -it "$containerId" \
        sh -c "            
            sudo chown -R $config_RemoteUser /workspaces
            sudo chown -R $config_RemoteUser $containerHomeDirectory

            if [ ! -f $containerHomeDirectory/.local/share/nvim-linux64/bin/nvim ]; then
                cd /tmp &&
                curl -LO \"$nvimDownload\" &&
                tar xzf nvim-linux64.tar.gz &&
                mkdir -p $containerHomeDirectory/.local/share &&
                mv ./nvim-linux64/* $containerHomeDirectory/.local/share/nvim-linux64/
            fi

            chmod +x \"$containerHomeDirectory/.local/share/nvim-linux64/bin/nvim\"
            
            mkdir -p $containerHomeDirectory/.local/bin
            cd $containerHomeDirectory/.local/bin/ &&
            ln -sf $containerHomeDirectory/.local/share/nvim-linux64/bin/nvim nvim
        "
    if [[ $? -ne 0 ]]; then
        PrintError "Initializing the container failed."
        docker rm -f "$containerId"
        exit 1
    fi

    if [[ -n "$config_PostCreateCommand" ]]; then
        PrintInfo "Executing postCreateCommand..."
        docker exec -u "$config_RemoteUser" -it "$containerId" bash -c "$config_PostCreateCommand"
        if [[ $? -ne 0 ]]; then
            PrintError "Executing postCreateCommand failed."
            docker rm -f "$containerId"
            exit 1
        fi
    fi
fi

if [ "$(docker inspect -f '{{.State.Running}}' "$containerId")" == "false" ]; then
    PrintInfo "Starting container \"$containerId\"..."
    docker start "$containerId"
    if [[ $? -ne 0 ]]; then
        PrintError "Starting the container failed."
        exit 1
    fi
fi

PrintInfo "Attaching to the container \"$containerId\" project..."

AttachingFailed() {
    PrintError "Attaching to the container failed."
    PrintInfo "Attaching the container with bash for debugging..."
    docker exec -u "$config_RemoteUser" \
        -it "$containerId" \
        bash
    exit 1
}

if [[ -n "$config_PostCreateCommand" ]]; then
    PrintInfo "Executing postStartCommand..."
    docker exec -u "$config_RemoteUser" -it "$containerId" bash -c "$config_PostStartCommand"
    if [[ $? -ne 0 ]]; then
        PrintError "Executing postStartCommand failed."
        AttachingFailed
    fi
fi

docker exec -u "$config_RemoteUser" \
    -it "$containerId" \
    bash -c "
        $containerHomeDirectory/.local/bin/nvim
    "
if [[ $? -ne 0 ]]; then
    AttachingFailed
fi
