#!/bin/bash

green='\033[1;32m'
darkRed='\033[0;31m'
comment='\033[0;33m'
red='\033[0;91m'
nc='\033[0m'

PrintInfo() {
    local message=$1
    echo -e "[${green}INFO${nc}] $message"
}

PrintCommand() {
    local message=$1
    local indentedMessage=$(echo -e "$message" | sed 's/^/    /')
    echo -e "\n${comment}$indentedMessage${nc}\n"
}

PrintError() {
    local message=$1
    echo -e "[${red}ERROR${nc}] ${darkRed}$message${nc}"
}

Error() {
    local message=$1
    local finally=$2
    PrintError "$message" ;
    [[ -n "$finally" ]] && $finally
    exit 1
}

ExpandVariables() {
    local value="$1"
    echo -e "$(source <(echo -e "echo \$\"$value\""))"
}

GetProfileValue() { 
    local key="$1"
    local value=$(echo -e "$profile" | jq -er ".${key}") && [[ "$value" == "null" ]] && Error "Failed to parse $key."
    echo -e "$value"
}


ExecuteProfileCommand() {
    local key="$1"
    local profile_commands=$(GetProfileValue "$key")

    if [ -n "$profile_commands" ]; then
        local commands=$(echo -e "$profile_commands" | jq -r 'join("\n")') && [[ -z "$commands" ]] && Error "Failed to parse $key."
        local expanded_commands=$(ExpandVariables "$commands")
        PrintInfo "Executing profile command $key..."
        PrintCommand "$expanded_commands"
        docker exec -u "$config_RemoteUser" -it "$containerId" bash -c "$expanded_commands"
        if [[ $? -ne 0 ]]; then
            PrintError "Executing $key failed."
            return 1
        fi
    fi
    return 0
}


ProfileVolumesAsDockerArgs() {
    local volumes=$(echo "$profile" | jq -r '.volumes[] | "-v \(.)"' | tr '\n' ' ') && [[ -z "$volumes" ]] && Error "Failed to parse volumes."
    ExpandVariables "$volumes"
}

CreateVolumeDirs() {
    local volumeDirs=$(echo "$profile" | jq -r '.volumes[] | split(":")[0] | .[0]' | ExpandVariables) && [[ -z "$volumeDirs" ]] && Error "Failed to parse volumes."
    for volumeDir in $volumeDirs; do
        if [[ ! -d "$volumeDir" ]]; then
            PrintInfo "Creating directory $volumeDir"
            mkdir -p "$volumeDir" || Error "Failed to create directory $volumeDir."
        fi
    done
}

FindProjectConfig() {
    local paths=(
        "$projectPath/devcontainer.json"
        "$projectPath/.devcontainer/devcontainer.json"
    )

    for path in "${paths[@]}"; do
        if [[ -f "$path" ]]; then
            echo -e "$path"
            return
        fi
    done
}

GetConfigValue() {
    local key="$1"

    local value=$(echo -e "$projectConfig" | jq -r ".$key")
    if [[ "$value" != "null" ]]; then
        echo -e "$value"
        return
    fi

    local metadataValue=$(echo -e "$imageConfig" | jq -r ". | reverse | .[] | select(.$key != null) | .$key" | head -n 1)
    if [[ "$metadataValue" != "" && "$metadataValue" != "null" ]]; then
        echo -e "$metadataValue"
        return
    fi

    echo -e ""
}

ExecuteConfigCommand() {
    local key="$1"
    local command=$(GetConfigValue "$key")

    if [[ -n "$command" ]]; then
        PrintInfo "Executing config command $key..."
        PrintCommand "$command"
        docker exec -u "$config_RemoteUser" -it "$containerId" bash -c "$command"
        if [[ $? -ne 0 ]]; then
            PrintError "Executing $key failed."
            return 1
        fi
    fi

    return 0
}

homeDirectory="$HOME"
configDir="$homeDirectory/.config/nvim-devcontainer-dd"
profilesDir="$configDir/profiles"

arg_ProjectPath=""
for ((i = 2; i <= $#; i++)); do
    arg_ProjectPath="$arg_ProjectPath ${!i}"
done
if [[ -n "$arg_ProjectPath" ]]; then
    projectPath=$(realpath "$arg_ProjectPath")
else
    projectPath=$(realpath "$(pwd)")
fi
projectName=$(basename "$projectPath")

projectConfigPath=$(FindProjectConfig) && [[ ! -f "$projectConfigPath" ]] && Error "No devcontainer.json found."
projectConfigDir=$(dirname "$projectConfigPath")
projectConfig=$(sed '/^\s*\/\/.*\|\/\*.*\*\/\s*$/d' "$projectConfigPath") && [[ -z "$projectConfig" ]] && Error "Failed to read devcontainer.json."

containerId=$(docker ps -aq -f "label=nvim-devcontainer-$projectPath")
containerLabel="nvim-devcontainer-$projectPath"
config_Dockerfile=$(GetConfigValue 'build.dockerfile')

if [[ -n "$config_Dockerfile" ]]; then
    dockerfilePath="$projectConfigDir/$config_Dockerfile"
    config_Image="nvim-devcontainer--$projectName--$(sha256sum "$dockerfilePath" | awk '{print $1}')"
else
    config_Image=$(GetConfigValue 'image') && [[ -z "$config_Image" ]] && Error "No image specified in devcontainer.json."
fi

PrintInfo "Using Docker image \"$config_Image\"..."
imageConfig=$(docker inspect --format='{{index .Config.Labels "devcontainer.metadata"}}' "$config_Image")
config_RemoteUser=$(GetConfigValue 'remoteUser')
if [[ -z "$config_RemoteUser" ]]; then
    config_RemoteUser="root"
    containerHomeDir="/root"
else
    containerHomeDir="/home/$config_RemoteUser"
fi



defaultProfileName="nvim"
defaultProfile='{
    "volumes": [
        "$configDir/nvim/config:$containerHomeDir/.config/nvim",
        "$configDir/nvim/cache:$containerHomeDir/.cache/nvim",
        "$configDir/nvim/local/state:$containerHomeDir/.local/state",
        "$configDir/nvim/local/share/nvim:$containerHomeDir/.local/share/nvim",
        "$configDir/nvim/local/share/nvim-linux64:$containerHomeDir/.local/share/nvim-linux64",
        "$configDir/nvim/lazygit:$containerHomeDir/.local/share/lazygit_x86_64"
    ],
    "env": {},
    "installCommand": [
        "if [ ! -f $containerHomeDir/.local/share/nvim-linux64/bin/nvim ]; then",
        "   cd /tmp &&",
        "   curl -LO \"https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz\" &&",
        "   tar xzf nvim-linux64.tar.gz &&",
        "   mv ./nvim-linux64/* $containerHomeDir/.local/share/nvim-linux64/ &&",
        "   git clone https://github.com/LazyVim/starter ~/.config/nvim &&",
        "   rm -rf ~/.config/nvim/.git",
        "fi",
        "",
        "if [ ! -f $containerHomeDir/.local/share/lazygit_x86_64/lazygit ]; then",
        "   cd /tmp &&",
        "   curl -LO https://github.com/jesseduffield/lazygit/releases/download/v0.39.4/lazygit_0.39.4_Linux_x86_64.tar.gz",
        "   tar xzf lazygit_0.39.4_Linux_x86_64.tar.gz",
        "   mv lazygit $containerHomeDir/.local/share/lazygit_x86_64",
        "fi",
        "",
        "chmod +x \"$containerHomeDir/.local/share/nvim-linux64/bin/nvim\" &&",
        "",
        "mkdir -p $containerHomeDir/.local/bin &&",
        "cd $containerHomeDir/.local/bin/ &&",
        "ln -sf $containerHomeDir/.local/share/nvim-linux64/bin/nvim nvim",
        "ln -sf $containerHomeDir/.local/share/lazygit_x86_64/lazygit lazygit"
    ],
    "attachCommand": ["$containerHomeDir/.local/bin/nvim"]
}';


mkdir -p "$profilesDir"
if [[ ! -f "$profilesDir/$defaultProfileName.json" ]]; then
    echo -e "$defaultProfile" >"$profilesDir/$defaultProfileName.json"
fi
arg_ProfileName=$1 && [[ -z "$arg_ProfileName" ]] && Error "No profile name specified. Available profiles: $(ls "$profilesDir" | sed 's/\.json//g' | tr '\n' ' ')"
profilePath="$profilesDir/$arg_ProfileName.json" && [[ ! -f "$profilePath" ]] && Error "Profile \"$arg_ProfileName\" not found."
profile=$(cat "$profilePath" | sed '/^\s*\/\/.*\|\/\*.*\*\/\s*$/d') && [[ -z "$profile" ]] && Error "Failed to read profile \"$arg_ProfileName\"."

# All variables are ready at this point

if [ -z "$containerId" ]; then
    if [[ -n "$config_Dockerfile" ]]; then
        PrintInfo "Building Docker image using $dockerfilePath..."
        docker build -t "$config_Image" -f "$dockerfilePath" "$projectConfigDir" || Error "Building Docker image failed."
    else
        PrintInfo "Pulling Docker image \"$config_Image\"..."
        docker pull "$config_Image" || Error "Pulling Docker image failed."
    fi

    PrintInfo "Creating container for \"$projectPath\" project..."

    PrintCommand "$(ProfileVolumesAsDockerArgs)"

    CreateVolumeDirs

    docker run --net=host -w "/workspaces/$projectName" \
        -v "$projectPath:/workspaces/$projectName" \
        $(ProfileVolumesAsDockerArgs) \
        -v "$homeDirectory/.gitconfig:/etc/gitconfig" \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -u "$config_RemoteUser" \
        -e DISPLAY="$DISPLAY" \
        -e SHELL=/bin/bash \
        -d --label "$containerLabel" "$config_Image" bash -c "
            sleep 10
            while [ \$(ls /dev/pts | wc -l) -gt 1 ]; do
                sleep 10
            done
        " || Error "Creating container failed."

    containerId=$(docker ps -aq -f "label=$containerLabel")

    CreationError() {
        Error "Creating container failed." "docker rm -f $containerId"
    }

    docker exec -u "$config_RemoteUser" \
        -it "$containerId" \
        bash -c "            
            sudo chown -R $config_RemoteUser /workspaces
            sudo chown -R $config_RemoteUser $containerHomeDir
        " || CreationError

    ExecuteProfileCommand "installCommand" || CreationError
    ExecuteConfigCommand "postCreateCommand" || CreationError

    PrintInfo "Container created with ID \"$containerId\"."
fi

# Attach to the container

PrintInfo "Attaching to the container \"$containerId\" project..."

AttachWithBash() {
    PrintInfo "Attaching the container with bash..."
    docker exec -u "$config_RemoteUser" -it "$containerId" bash
}

AttachingFailed() {
    Error "Attaching to the container failed." "AttachWithBash"
}

if [ "$(docker inspect -f '{{.State.Running}}' "$containerId")" == "false" ]; then
    PrintInfo "Container is not running. Starting it..."
    docker start "$containerId" || AttachingFailed
    ExecuteConfigCommand "postStartCommand" || AttachingFailed
fi

ExecuteProfileCommand "installCommand" || CreationError
ExecuteConfigCommand "postAttachCommand" || AttachingFailed
ExecuteProfileCommand "attachCommand" || AttachingFailed
